;/*******************************************************
;Timers/Counters initialization created by the
;CodeWizardAVR V3.37 Automatic Program Generator
;© Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;*******************************************************/
;
;// I/O Registers definitions
;#include <xmega128b1.h>
;#include <stdint.h>
;
;// Disable a Timer/Counter type TC0
;void tc0_disable(TC0_t *ptc)
; 0003 0010 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0003 0011 // Timer/Counter off
; 0003 0012 ptc->CTRLA=TC_CLKSEL_OFF_gc;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;	*ptc -> R16,R17
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
; 0003 0013 // Issue a reset command
; 0003 0014 ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0003 0015 }
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;
;// Timer/Counter TCC0 initialization
;void tcc0_init(void)
; 0003 0019 {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 001A unsigned char s;
; 0003 001B unsigned char n;
; 0003 001C 
; 0003 001D // Note: The correct PORTC direction for the Compare Channels
; 0003 001E // outputs is configured in the ports_init function.
; 0003 001F 
; 0003 0020 // Save interrupts enabled/disabled state
; 0003 0021 s=SREG;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0022 // Disable interrupts
; 0003 0023 #asm("cli")
;PCODE: $00000015 VOL: 0
; 0003 0024 
; 0003 0025 // Disable and reset the timer/counter just to be sure
; 0003 0026 tc0_disable(&TCC0);
;PCODE: $00000016 VOL: 1
;PCODE: $00000017 VOL: 0
; 0003 0027 // Clock source: ClkPer/1
; 0003 0028 TCC0.CTRLA=TC_CLKSEL_DIV1_gc;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 1
; 0003 0029 // Mode: Normal Operation, Overflow Int./Event on TOP
; 0003 002A // Compare/Capture on channel A: Off
; 0003 002B // Compare/Capture on channel B: Off
; 0003 002C // Compare/Capture on channel C: Off
; 0003 002D // Compare/Capture on channel D: Off
; 0003 002E TCC0.CTRLB=(0<<TC0_CCDEN_bp) | (0<<TC0_CCCEN_bp) | (0<<TC0_CCBEN_bp) | (0<<TC0_CCAEN_bp) |
; 0003 002F 	TC_WGMODE_NORMAL_gc;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 1
; 0003 0030 // Capture event source: None
; 0003 0031 // Capture event action: None
; 0003 0032 TCC0.CTRLD=TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 1
; 0003 0033 
; 0003 0034 // Set Timer/Counter in Normal mode
; 0003 0035 TCC0.CTRLE=TC_BYTEM_NORMAL_gc;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 1
; 0003 0036 
; 0003 0037 // Overflow interrupt: High Level
; 0003 0038 // Error interrupt: Disabled
; 0003 0039 TCC0.INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_HI_gc;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 1
; 0003 003A 
; 0003 003B // Compare/Capture channel A interrupt: Disabled
; 0003 003C // Compare/Capture channel B interrupt: Disabled
; 0003 003D // Compare/Capture channel C interrupt: Disabled
; 0003 003E // Compare/Capture channel D interrupt: Disabled
; 0003 003F TCC0.INTCTRLB=TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 1
; 0003 0040 
; 0003 0041 // High resolution extension: Off
; 0003 0042 HIRESC.CTRLA&= ~HIRES_HREN0_bm;
;PCODE: $00000024 VOL: 1
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 1
; 0003 0043 
; 0003 0044 // Advanced Waveform Extension initialization
; 0003 0045 // Optimize for speed
; 0003 0046 #pragma optsize-
; 0003 0047 // Disable locking the AWEX configuration registers just to be sure
; 0003 0048 n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
;PCODE: $00000027 VOL: 1
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 0049 CCP=CCP_IOREG_gc;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 004A MCU.AWEXLOCK=n;
;PCODE: $0000002C VOL: 1
;PCODE: $0000002D VOL: 0
; 0003 004B // Restore optimization for size if needed
; 0003 004C #pragma optsize_default
; 0003 004D 
; 0003 004E // Pattern generation: Off
; 0003 004F // Dead time insertion: Off
; 0003 0050 AWEXC.CTRL=(0<<AWEX_PGM_bp) | (0<<AWEX_CWCM_bp) | (0<<AWEX_DTICCDEN_bp) | (0<<AWEX_DTICCCEN_bp) |
; 0003 0051 	(0<<AWEX_DTICCBEN_bp) | (0<<AWEX_DTICCAEN_bp);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 1
; 0003 0052 
; 0003 0053 // Fault protection initialization
; 0003 0054 // Fault detection on OCD Break detection: On
; 0003 0055 // Fault detection restart mode: Latched Mode
; 0003 0056 // Fault detection action: None (Fault protection disabled)
; 0003 0057 AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0003 0058 	(0<<AWEX_FDDBD_bp) | (0<<AWEX_FDMODE_bp) | AWEX_FDACT_NONE_gc;
;PCODE: $00000030 VOL: 1
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 1
; 0003 0059 // Fault detect events:
; 0003 005A // Event channel 0: Off
; 0003 005B // Event channel 1: Off
; 0003 005C // Event channel 2: Off
; 0003 005D // Event channel 3: Off
; 0003 005E // Event channel 4: Off
; 0003 005F // Event channel 5: Off
; 0003 0060 // Event channel 6: Off
; 0003 0061 // Event channel 7: Off
; 0003 0062 AWEXC.FDEMASK=0b00000000;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
; 0003 0063 // Make sure the fault detect flag is cleared
; 0003 0064 AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
;PCODE: $00000038 VOL: 1
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 1
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0003 0065 
; 0003 0066 // Clear the interrupt flags
; 0003 0067 TCC0.INTFLAGS=TCC0.INTFLAGS;
;PCODE: $00000040 VOL: 1
;PCODE: $00000041 VOL: 1
; 0003 0068 // Set Counter register
; 0003 0069 TCC0.CNT=0x0000;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 1
; 0003 006A // Set Period register
; 0003 006B TCC0.PER=0x07CF;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 1
; 0003 006C // Set channel A Compare/Capture register
; 0003 006D TCC0.CCA=0x0000;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 1
; 0003 006E // Set channel B Compare/Capture register
; 0003 006F TCC0.CCB=0x0000;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 1
; 0003 0070 // Set channel C Compare/Capture register
; 0003 0071 TCC0.CCC=0x0000;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 1
; 0003 0072 // Set channel D Compare/Capture register
; 0003 0073 TCC0.CCD=0x0000;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 1
; 0003 0074 
; 0003 0075 // Restore interrupts enabled/disabled state
; 0003 0076 SREG=s;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0003 0077 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;static unit32_t msCounter = 0;
; 0003 0079 static unit32_t msCounter = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
