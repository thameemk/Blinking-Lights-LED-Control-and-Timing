;/*******************************************************
;This program was created by the CodeWizardAVR V3.37
;Automatic Program Generator
;© Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22-04-2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATxmega128B1
;Program type            : Application
;AVR Core Clock frequency: 2.000000 MHz
;Memory model            : Small
;Data Stack size         : 2048
;*******************************************************/
;
;// I/O Registers definitions
;#include <xmega128b1.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Clock System initialization function
;#include "clock_init.h"
;
;// I/O Ports initialization function
;#include "ports_init.h"
;
;// Timers/Counters initialization functions
;#include "timers_init.h"
;
;// Declare your global variables here
;
;void main(void)
; 0000 0028 {

	.CSEG
;PCODE: $00000000 VOL: 0
; 0000 0029 // Declare your local variables here
; 0000 002A unsigned char n;
; 0000 002B 
; 0000 002C // Interrupt system initialization
; 0000 002D // Optimize for speed
; 0000 002E #pragma optsize-
; 0000 002F // Make sure the interrupts are disabled
; 0000 0030 #asm("cli")
;	n -> R17
;PCODE: $00000001 VOL: 0
; 0000 0031 // Low level interrupt: Off
; 0000 0032 // Round-robin scheduling for low level interrupt: Off
; 0000 0033 // Medium level interrupt: Off
; 0000 0034 // High level interrupt: On
; 0000 0035 // The interrupt vectors will be placed at the start of the Application FLASH section
; 0000 0036 n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
; 0000 0037 	PMIC_HILVLEN_bm;
;PCODE: $00000002 VOL: 1
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
; 0000 0038 CCP=CCP_IOREG_gc;
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
; 0000 0039 PMIC.CTRL=n;
;PCODE: $00000008 VOL: 1
;PCODE: $00000009 VOL: 0
; 0000 003A // Set the default priority for round-robin scheduling
; 0000 003B PMIC.INTPRI=0x00;
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 1
; 0000 003C // Restore optimization for size if needed
; 0000 003D #pragma optsize_default
; 0000 003E 
; 0000 003F // System clocks initialization
; 0000 0040 system_clocks_init();
;PCODE: $0000000C VOL: 0
; 0000 0041 
; 0000 0042 // Ports initialization
; 0000 0043 ports_init();
;PCODE: $0000000D VOL: 0
; 0000 0044 
; 0000 0045 // Virtual Ports initialization
; 0000 0046 vports_init();
;PCODE: $0000000E VOL: 0
; 0000 0047 
; 0000 0048 // Timer/Counter TCC0 initialization
; 0000 0049 tcc0_init();
;PCODE: $0000000F VOL: 0
; 0000 004A 
; 0000 004B // Globally enable interrupts
; 0000 004C #asm("sei")
;PCODE: $00000010 VOL: 0
; 0000 004D 
; 0000 004E while (1)
;PCODE: $00000011 VOL: 0
; 0000 004F       {
; 0000 0050       // Place your code here
; 0000 0051 
; 0000 0052       }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0053 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
